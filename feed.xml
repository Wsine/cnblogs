
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
<channel>
  <title>Wsine's Blog</title>
  <atom:link href="https://wsine.github.io/blog/feed.xml" rel="self" type="application/rss+xml" />
  <link>https://wsine.github.io/blog</link>
  <description>To be simple, to be powerful.</description>
   
  <item>
    <title><![CDATA[树莓派入门教程]]></title>
    <link>https://wsine.github.io/blog/#/p03.%e6%a0%91%e8%8e%93%e6%b4%be%e5%bc%80%e5%8f%91%2f%e6%a0%91%e8%8e%93%e6%b4%be%e5%85%a5%e9%97%a8%e6%95%99%e7%a8%8b</link>
    <guid isPermaLink="false">https://wsine.github.io/blog/#/p03.%e6%a0%91%e8%8e%93%e6%b4%be%e5%bc%80%e5%8f%91%2f%e6%a0%91%e8%8e%93%e6%b4%be%e5%85%a5%e9%97%a8%e6%95%99%e7%a8%8b</guid>
    <description><![CDATA[<h1 id="树莓派入门教程">树莓派入门教程</h1>
<h3 id="准备工具">准备工具</h3>
<ul>
<li>树莓派</li>
<li>网线一根</li>
<li>免驱无线网卡</li>
<li>usb数据线供电</li>
</ul>
<h3 id="格式化sd卡">格式化sd卡</h3>
<p>在这里使用SDFormatter这款软件，能够格式化sd卡中的linux中的Ext4日志分区 下载网址： http://www.sdcard.org/downloads/formatter_4/</p>
<p>选择sd卡的驱动盘符，格式化即可</p>
<h3 id="烧录镜像">烧录镜像</h3>
<p>在这里使用Win32DiskImager这款软件，给树莓派烧录镜像到sd卡中 Win32DiskImager下载网址： http://www.softpedia.com/get/CD-DVD-Tools/Data-CD-DVD-Burning/Win32-Disk-Imager.shtml</p>
<p>树莓派系统下载网址： https://www.raspberrypi.org/downloads/</p>
<p>一般选择RASPBIAN系统，下载后为.img文件</p>
<p>打开Win32DiskImager选择sd卡的驱动盘符，选择镜像文件，点击Write等待进度条完成即可</p>
<h3 id="首次连接获取ip地址">首次连接获取ip地址</h3>
<p>方法一： 笔记本已经使用无线连接wifi接入到互联网，打开网络和共享中心，更改适配器设置，右击无线网卡选属性，点击共享选项卡，允许其他网络用户通过此计算机的Internet连接来连接，家庭网络连接选择有线网卡，确定保存设置。（事后自己调回来）</p>
<p>网线连接电脑和树莓派，打开cmd命令行，敲入以下命令<code>arp -a</code>，看到以下命令界面，记录下里面的有线网卡分配的动态ip地址</p>
<p>参考地址：（有图片） http://shumeipai.nxez.com/2013/10/15/raspberry-pi-and-a-network-cable-directly-connected-laptop.html</p>
<p>这种方法成功率不太高，但可以尝试尝试。</p>
<p>方法二： 在这里使用DHCP Server这款软件 下载地址： http://www.dhcpserver.de/cms/ 和上述一样，共享网络 开启DHCP Server服务。网线连接树莓派后会自动分配ip地址。记录下这个地址。 如何开启请参考这个博客： http://www.cnblogs.com/wsine/p/4951489.html</p>
<p>成功率：100%</p>
<p>方法三： 使用路由器，连接电脑和树莓派，进入路由器后台查看树莓派ip地址。</p>
<p>成功率：1000%</p>
<p>方法四： 直接用HDMI连显示器进入图形化界面，点点鼠标就连上wifi了</p>
<p>成功率：1000%</p>
<h3 id="登陆树莓派">登陆树莓派</h3>
<p>在这里使用Putty这款软件 下载网址： http://www.putty.ws/ （ps：不要在baidu下不要在baidu下不要在baidu下，分分钟给你一个全家桶</p>
<p>在这里填入刚才记录下的ip地址，端口22，连接方式选择SSH，点击Open即可</p>
<div class="figure">
<img src="/images/wsine-blog-image447.jpg" />

</div>
<p>树莓派默认账号：pi 树莓派默认密码：raspberry</p>
<p>官网链接中有比较详细的关于其他功能的使用教程，请自行参考。</p>
<h3 id="配置无线wifi连接">配置无线wifi连接</h3>
<ol style="list-style-type: decimal">
<li>Putty连接进入树莓派后，命令行敲 <code>sudo vi /etc/wpa_supplicant/wpa_supplicant.conf</code></li>
<li>按下键盘 i 键（K上面那个键）进入编辑模式</li>
<li><p>敲入以下内容：</p>
<pre><code>network={
ssid=&quot;Your Wifi name&quot;
key_mgmt=WPA-PSK
psk=&quot;Your Wifi password&quot;
}</code></pre>
ssid前面为一个tab键，替换里面的内容为自己的wifi内容，双引号保留</li>
<li>按下ESC键</li>
<li>敲入<code>:wq</code>回车，保存并退出</li>
<li><p>敲入<code>sudo shutdown -h now</code>关机收工</p></li>
</ol>
<p>最终效果： 动态ip连接到自己的AP。以后通过AP分配的ip地址进入树莓派，不需要网线</p>
<p>PS（还是想废话一点） 无线网卡我选用的是树莓派系统免驱的 只要我没涉及到的内容就是原生的设置</p>
<p>另类方法： 通过修改SD卡中的cmdline.txt文件（在里面加入语句<code>ip=***.***.***.***</code>），将树莓派设置成静态IP地址，但此时只有将电脑的“本地连接”的静态IP地址设置成与树莓派静态IP地址同一号段才能成功连接。成功连接后可以配置无线wifi。</p>
<h3 id="进入图形化界面">进入图形化界面</h3>
<p>在这里使用VNC Viewer这款软件 下载地址： http://www.realvnc.com/download/</p>
<p>填入树莓派的ip地址即可连接</p>
<p>如果树莓派安装了xdrp软件，可以通过Windows自带远程桌面软件进入</p>
<h3 id="快速传文件">快速传文件</h3>
<p>在这里使用Winscp这款软件 下载地址： http://winscp.net/eng/download.php</p>
<p>文件协议选择SFTP，填入树莓派ip地址，端口22，用户名pi，密码raspberry。Login。</p>
<p>如想访问系统目录，请给root设置密码，方法如下： 1. <code>sudo passwd</code> 2. 输入密码 3. 确认密码</p>
<p>通过root登陆即可访问系统目录。 （ps：文件系统权限在linux系统中很重要，谨慎操作避免带来不必要的麻烦，请自行学习相关内容</p>
<h3 id="后记">后记</h3>
<p>最后说一句：请在官网下载软件。</p>]]></description>
    <pubDate>Sat, 2 Oct 2021 15:11:32 +0800</pubDate>
  </item>
   
  <item>
    <title><![CDATA[DHCP Server软件使用教程]]></title>
    <link>https://wsine.github.io/blog/#/p03.%e6%a0%91%e8%8e%93%e6%b4%be%e5%bc%80%e5%8f%91%2fDHCP_Server%e8%bd%af%e4%bb%b6%e4%bd%bf%e7%94%a8%e6%95%99%e7%a8%8b</link>
    <guid isPermaLink="false">https://wsine.github.io/blog/#/p03.%e6%a0%91%e8%8e%93%e6%b4%be%e5%bc%80%e5%8f%91%2fDHCP_Server%e8%bd%af%e4%bb%b6%e4%bd%bf%e7%94%a8%e6%95%99%e7%a8%8b</guid>
    <description><![CDATA[<h1 id="dhcp-server软件使用教程">DHCP Server软件使用教程</h1>
<h3 id="前提网络环境配置">前提网络环境配置</h3>
<ol style="list-style-type: decimal">
<li>电脑连接上wifi</li>
<li>网络和共享中心中更改适配器，共享无线网卡给以太网网卡</li>
<li>手动设置以太网网卡ipv4地址为192.168.1.1，子网掩码为255.255.255.0</li>
</ol>
<h3 id="正文基本为图片">正文（基本为图片）</h3>
<p>首先以管理员权限打开 dhcpwiz.exe 这个软件</p>
<div class="figure">
<img src="/images/wsine-blog-image418.png" />

</div>
<p>这里以太网的IP-Adress应显示为上面配置的192.168.1.1</p>
<div class="figure">
<img src="/images/wsine-blog-image419.png" />

</div>
<div class="figure">
<img src="/images/wsine-blog-image420.png" />

</div>
<div class="figure">
<img src="/images/wsine-blog-image421.png" />

</div>
<p>这里点击一下Write INI file再下一步</p>
<div class="figure">
<img src="/images/wsine-blog-image422.png" />

</div>
<p>这里依次点击Configure-&gt;Install-&gt; Start，勾选Run DHCP server immediatly，如下图显示，点击完成</p>
<div class="figure">
<img src="/images/wsine-blog-image423.png" />

</div>
<div class="figure">
<img src="/images/wsine-blog-image424.png" />

</div>
<p>这是选择Continue as tray app，然后DHCP服务启动，右下角任务栏有图标显示</p>
<p>接着树莓派上电开机进入系统（耐心等一会儿，开机要时间），然后用网线连接树莓派和电脑（多试几次，知道为什么要完全开机了没）</p>
<p>然后你会看到这个显示（这是Win10界面，不同的系统不同，就是一个系统通知</p>
<div class="figure">
<img src="/images/wsine-blog-image425.png" />

</div>
<p>上图就是ip地址了</p>
<p>然后用Putty软件进入即可</p>
<div class="figure">
<img src="/images/wsine-blog-image426.png" />

</div>
<h3 id="后记">后记</h3>
<p>不使用DHCP Server之前记得关掉，然后恢复适配器的修改，不然作大死喔（笑脸</p>]]></description>
    <pubDate>Sat, 2 Oct 2021 15:11:32 +0800</pubDate>
  </item>
   
  <item>
    <title><![CDATA[Linux之tmux学习]]></title>
    <link>https://wsine.github.io/blog/#/p02.Linux%e5%ad%a6%e4%b9%a0%e4%b9%8b%e8%b7%af%2fLinux%e4%b9%8btmux%e5%ad%a6%e4%b9%a0</link>
    <guid isPermaLink="false">https://wsine.github.io/blog/#/p02.Linux%e5%ad%a6%e4%b9%a0%e4%b9%8b%e8%b7%af%2fLinux%e4%b9%8btmux%e5%ad%a6%e4%b9%a0</guid>
    <description><![CDATA[<h1 id="linux之tmux学习">Linux之tmux学习</h1>
<h2 id="前言">前言</h2>
<p>在Linux的世界中，命令行是最优雅的交互方式。</p>
<p>但是，只会使用一个交互终端的程序员，是不足以成为Linux下的大牛的。</p>
<p>那么tmux是什么，引用一下原文介绍</p>
<blockquote>
<pre><code>tmux is a &quot;terminal multiplexer&quot;, it enables a number of terminals (or windows)
to be accessed and controlled from a single terminal. tmux is intended to be a
simple, modern, BSD-licensed alternative to programs such as GNU screen.</code></pre>
</blockquote>
<p>tmux可以让你在一个终端中同时交互多个命令，而不用多开终端和不断切换窗口，同屏显示的效率也更高一些。</p>
<h2 id="正文">正文</h2>
<p>tmux的原生触发键是<code>Ctrl + b</code>，但是由于它的bash原生的后退字符快捷键冲突了，所以我修改了一下键位配置。</p>
<p><strong>触发键：</strong>修改为<code>Ctrl + v</code>，该快捷键仅和vim中的block-visual模式冲突，但该模式使用频率低，而且冲突后可以再次触发进入block-visual，所以不用太介意</p>
<p><strong>左右分屏：</strong>修改为<code>|</code>，形象生动，竖线表达左右分屏，避免记忆原生<code>%</code>才是左右分屏的快捷键</p>
<p><strong>上下分屏：</strong>修改为<code>-</code>，形象生动，横线表达上下分屏，避免记忆原生<code>&quot;</code>才是上下分屏的快捷键</p>
<p><strong>面板切换：</strong>修改为hjkl，配合vim的操作方式，避免移动手掌和误操作性，分别对应上下左右</p>
<p><strong>窗口切换：</strong>修改为序号1为第一窗口（默认0），切换第一个窗口的时候不用在找0的位置，切换方式为触发键后加窗口的序号<code>Ctrl + v，&lt;index&gt;</code>，序号默认显示在终端的最下方</p>
<p><strong>窗口自动重排列：</strong>退出2号窗口后，3号窗口会自动序号变为2号，4号及后面的同理</p>
<p><strong>调整面板大小：</strong>按住触发键<code>Ctrl + v</code>，不断按hjkl即可调整面板的大小</p>
<p><strong>显示效果：</strong></p>
<div class="figure">
<img src="/images/wsine-blog-image448.png" alt="请刷新" />
<p class="caption">请刷新</p>
</div>
<h2 id="附录">附录</h2>
<p><a href="https://github.com/Wsine/Backup/blob/master/linux/.tmux.conf">.tmux.conf</a>文件内容，放置在<code>~/.tmux.conf</code>路径下，建议重定向tmux命令为<code>tmux -2</code>才能启动256色彩方案</p>
<pre><code># =====&gt; TMUX general &lt;=====
# reload settings message
bind R source-file ~/.tmux.conf \; display-message &quot;Config reloaded...&quot;

# remap prefix from &#39;C-b&#39; to &#39;C-v&#39;
unbind C-b
set-option -g prefix C-v
bind-key C-v send-prefix

# =====&gt; TMUX display &lt;=====
# use 256 colors
set -g default-terminal &quot;screen-256color&quot;
# use vi mode
setw -g mode-keys vi

# start window indexing at one instead of zero
set -g base-index 1
# auto reorder windows number
set-option -g renumber-windows on

# =====&gt; TMUX key bindings &lt;=====
# split window to two horizontal panes
bind | split-window -h
# split window to two vertical panes
bind - split-window -v
# resize-pane with hjkl
bind -r C-h resize-pane -L
bind -r C-j resize-pane -D
bind -r C-k resize-pane -U
bind -r C-l resize-pane -R
# select-pane with hjkl
bind -r h select-pane -L
bind -r j select-pane -D
bind -r k select-pane -U
bind -r l select-pane -R</code></pre>]]></description>
    <pubDate>Sat, 2 Oct 2021 15:11:32 +0800</pubDate>
  </item>
   
  <item>
    <title><![CDATA[树莓派入门教程]]></title>
    <link>https://wsine.github.io/blog/#/p01.%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88%2f%e6%a0%91%e8%8e%93%e6%b4%be%e5%85%a5%e9%97%a8%e6%95%99%e7%a8%8b</link>
    <guid isPermaLink="false">https://wsine.github.io/blog/#/p01.%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88%2f%e6%a0%91%e8%8e%93%e6%b4%be%e5%85%a5%e9%97%a8%e6%95%99%e7%a8%8b</guid>
    <description><![CDATA[<h1 id="树莓派入门教程">树莓派入门教程</h1>
<h3 id="准备工具">准备工具</h3>
<ul>
<li>树莓派</li>
<li>网线一根</li>
<li>免驱无线网卡</li>
<li>usb数据线供电</li>
</ul>
<h3 id="格式化sd卡">格式化sd卡</h3>
<p>在这里使用SDFormatter这款软件，能够格式化sd卡中的linux中的Ext4日志分区 下载网址： http://www.sdcard.org/downloads/formatter_4/</p>
<p>选择sd卡的驱动盘符，格式化即可</p>
<h3 id="烧录镜像">烧录镜像</h3>
<p>在这里使用Win32DiskImager这款软件，给树莓派烧录镜像到sd卡中 Win32DiskImager下载网址： http://www.softpedia.com/get/CD-DVD-Tools/Data-CD-DVD-Burning/Win32-Disk-Imager.shtml</p>
<p>树莓派系统下载网址： https://www.raspberrypi.org/downloads/</p>
<p>一般选择RASPBIAN系统，下载后为.img文件</p>
<p>打开Win32DiskImager选择sd卡的驱动盘符，选择镜像文件，点击Write等待进度条完成即可</p>
<h3 id="首次连接获取ip地址">首次连接获取ip地址</h3>
<p>方法一： 笔记本已经使用无线连接wifi接入到互联网，打开网络和共享中心，更改适配器设置，右击无线网卡选属性，点击共享选项卡，允许其他网络用户通过此计算机的Internet连接来连接，家庭网络连接选择有线网卡，确定保存设置。（事后自己调回来）</p>
<p>网线连接电脑和树莓派，打开cmd命令行，敲入以下命令<code>arp -a</code>，看到以下命令界面，记录下里面的有线网卡分配的动态ip地址</p>
<p>参考地址：（有图片） http://shumeipai.nxez.com/2013/10/15/raspberry-pi-and-a-network-cable-directly-connected-laptop.html</p>
<p>这种方法成功率不太高，但可以尝试尝试。</p>
<p>方法二： 在这里使用DHCP Server这款软件 下载地址： http://www.dhcpserver.de/cms/ 和上述一样，共享网络 开启DHCP Server服务。网线连接树莓派后会自动分配ip地址。记录下这个地址。 如何开启请参考这个博客： http://www.cnblogs.com/wsine/p/4951489.html</p>
<p>成功率：100%</p>
<p>方法三： 使用路由器，连接电脑和树莓派，进入路由器后台查看树莓派ip地址。</p>
<p>成功率：1000%</p>
<p>方法四： 直接用HDMI连显示器进入图形化界面，点点鼠标就连上wifi了</p>
<p>成功率：1000%</p>
<h3 id="登陆树莓派">登陆树莓派</h3>
<p>在这里使用Putty这款软件 下载网址： http://www.putty.ws/ （ps：不要在baidu下不要在baidu下不要在baidu下，分分钟给你一个全家桶</p>
<p>在这里填入刚才记录下的ip地址，端口22，连接方式选择SSH，点击Open即可</p>
<div class="figure">
<img src="/images/wsine-blog-image447.jpg" />

</div>
<p>树莓派默认账号：pi 树莓派默认密码：raspberry</p>
<p>官网链接中有比较详细的关于其他功能的使用教程，请自行参考。</p>
<h3 id="配置无线wifi连接">配置无线wifi连接</h3>
<ol style="list-style-type: decimal">
<li>Putty连接进入树莓派后，命令行敲 <code>sudo vi /etc/wpa_supplicant/wpa_supplicant.conf</code></li>
<li>按下键盘 i 键（K上面那个键）进入编辑模式</li>
<li><p>敲入以下内容：</p>
<pre><code>network={
ssid=&quot;Your Wifi name&quot;
key_mgmt=WPA-PSK
psk=&quot;Your Wifi password&quot;
}</code></pre>
ssid前面为一个tab键，替换里面的内容为自己的wifi内容，双引号保留</li>
<li>按下ESC键</li>
<li>敲入<code>:wq</code>回车，保存并退出</li>
<li><p>敲入<code>sudo shutdown -h now</code>关机收工</p></li>
</ol>
<p>最终效果： 动态ip连接到自己的AP。以后通过AP分配的ip地址进入树莓派，不需要网线</p>
<p>PS（还是想废话一点） 无线网卡我选用的是树莓派系统免驱的 只要我没涉及到的内容就是原生的设置</p>
<p>另类方法： 通过修改SD卡中的cmdline.txt文件（在里面加入语句<code>ip=***.***.***.***</code>），将树莓派设置成静态IP地址，但此时只有将电脑的“本地连接”的静态IP地址设置成与树莓派静态IP地址同一号段才能成功连接。成功连接后可以配置无线wifi。</p>
<h3 id="进入图形化界面">进入图形化界面</h3>
<p>在这里使用VNC Viewer这款软件 下载地址： http://www.realvnc.com/download/</p>
<p>填入树莓派的ip地址即可连接</p>
<p>如果树莓派安装了xdrp软件，可以通过Windows自带远程桌面软件进入</p>
<h3 id="快速传文件">快速传文件</h3>
<p>在这里使用Winscp这款软件 下载地址： http://winscp.net/eng/download.php</p>
<p>文件协议选择SFTP，填入树莓派ip地址，端口22，用户名pi，密码raspberry。Login。</p>
<p>如想访问系统目录，请给root设置密码，方法如下： 1. <code>sudo passwd</code> 2. 输入密码 3. 确认密码</p>
<p>通过root登陆即可访问系统目录。 （ps：文件系统权限在linux系统中很重要，谨慎操作避免带来不必要的麻烦，请自行学习相关内容</p>
<h3 id="后记">后记</h3>
<p>最后说一句：请在官网下载软件。</p>]]></description>
    <pubDate>Sat, 2 Oct 2021 15:11:32 +0800</pubDate>
  </item>
   
  <item>
    <title><![CDATA[Ubuntu系统安装配置 Pintos 和 Bochs]]></title>
    <link>https://wsine.github.io/blog/#/p01.%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88%2fUbuntu%e7%b3%bb%e7%bb%9f%e5%ae%89%e8%a3%85%e9%85%8d%e7%bd%aePintos%e5%92%8cBochs</link>
    <guid isPermaLink="false">https://wsine.github.io/blog/#/p01.%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88%2fUbuntu%e7%b3%bb%e7%bb%9f%e5%ae%89%e8%a3%85%e9%85%8d%e7%bd%aePintos%e5%92%8cBochs</guid>
    <description><![CDATA[<h1 id="ubuntu系统安装配置-pintos-和-bochs">Ubuntu系统安装配置 Pintos 和 Bochs</h1>
<h3 id="安装过程">安装过程</h3>
<p>首先是UEFI启动模式下Win8.1安装Ubuntu14.04双系统，由于篇幅过长，就不在这里详写。可见博主的另一篇博客<a href="http://www.cnblogs.com/wsine/p/4297580.html" class="uri">http://www.cnblogs.com/wsine/p/4297580.html</a></p>
<p>本身已安装过其它软件，所以之前就安装好了一些必备的依赖库。 安装方法都是<code>sudo apt-get stall xxx</code>比较简单 <img src="/images/wsine-blog-image24.png" alt="1" /> <img src="/images/wsine-blog-image25.png" alt="2" /></p>
<p>接着就是解压两个软件到本地中，我选择的目录是<code>~/Software/OS_Concepts</code> <img src="/images/wsine-blog-image26.png" alt="3" /></p>
<p>初始化bochs的配置，命令行完成，然后打开configure文件却不知道该如何查看，截图这个以示完成（我用的文本编辑器是sublime） <img src="/images/wsine-blog-image27.png" alt="4" /></p>
<p>接着是修改ubuntu的环境变量，添加pintos进去，并运行试试 <img src="/images/wsine-blog-image28.png" alt="5" /> <img src="/images/wsine-blog-image29.png" alt="6" /></p>
<p>更改pintos下src/utils文件夹下面的Makefile文件 <img src="/images/wsine-blog-image30.png" alt="7" /></p>
<p>然后make命令执行之后，进行make check操作后截图可见 <img src="/images/wsine-blog-image31.png" alt="8" /></p>
<h3 id="后记">后记</h3>
<p>首先是大家看不懂教程的<code>$PINTOS</code>所代表的意思，我的理解就像是C++语言里面的<code>#define</code>宏定义语句。也就是要直接替换教程中所看到的这个字符为自己pintos的路径。</p>
<p>第二个是类似与<code>CC = gcc -m32</code>这样子的命令。没有接触过linux终端的可能不清楚，这是Terminal下面通用的格式，-m32这个是一个参数设置，多见于 <strong>-</strong> 这个字符之后都是参数设置。常见的错误是缺少空格或者-写在了前面之类的。</p>
<p>第三个是vim这个软件，一般的linux系统都是非自带的。而教程把这个写在了gedit前面，所以很多人在这步进行不下去就是因为没装vim这个高级程序员专用的代码编辑神器。</p>
<p>第四个是Terminal下面常用的是Tab键。写错了<code>pintos/src/utils</code>为<code>pintos/src/util</code>。这是因为没有使用Tab键补全命令或者到文件管理器查看文件夹名称所造成的。</p>
<p>后续会有Pintos的开源学习。详细请看本博客后续的文章。以及github上面的开源：<a href="https://github.com/Wsine/pintos-ubuntu" class="uri">https://github.com/Wsine/pintos-ubuntu</a></p>]]></description>
    <pubDate>Sat, 2 Oct 2021 15:11:32 +0800</pubDate>
  </item>
   
  <item>
    <title><![CDATA[Ubuntu14.04安装配置ndnSIM]]></title>
    <link>https://wsine.github.io/blog/#/p01.%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88%2fUbuntu14.04%e5%ae%89%e8%a3%85%e9%85%8d%e7%bd%aendnSIM</link>
    <guid isPermaLink="false">https://wsine.github.io/blog/#/p01.%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88%2fUbuntu14.04%e5%ae%89%e8%a3%85%e9%85%8d%e7%bd%aendnSIM</guid>
    <description><![CDATA[<h1 id="ubuntu14.04安装配置ndnsim">Ubuntu14.04安装配置ndnSIM</h1>
<h3 id="预环境">预环境</h3>
<p>Ubuntu14.04官方系统 请先使用<code>sudo apt-get update</code>更新一下源列表</p>
<h3 id="安装步骤">安装步骤</h3>
<h4 id="安装boost-lib">安装boost-lib</h4>
<pre><code>sudo apt-get install build-essential libsqlite3-dev libcrypto++-dev
sudo apt-get install libboost-all-dev</code></pre>
<p>其中，build-essential和libboost是目标安装文件，build-essential中包含各种编译工具，其中最主要的是个gcc和g++，这里g++版本要求为4.5.4</p>
<p>libboost会被默认安装在 <code>/usr/lib/x86_64-linux-gnu</code> 路径下，如通过源码安装请确认版本至少为1.46，官方要求最低版本号，已知1.59版本编译不成功，这里推荐1.54和1.55版本，在默认路径下可以查看版本号</p>
<h4 id="安装python-bindings">安装Python bindings</h4>
<pre><code>sudo apt-get install python-dev python-pygraphviz python-kiwi
sudo apt-get install python-pygoocanvas python-gnome2
sudo apt-get install python-rsvg ipython</code></pre>
<p>强烈建议，python必须是2.7，如果是3.4版本，请手动把每一个<code>print ''</code>语句修改为<code>print()</code>语句，所以还是老老实实用2.7吧，暂时默认安装就是2.7</p>
<p>命令行敲入python进入python交互环境即可看到版本号，使用exit()退出交互环境 #### 下载ns3、pybindgen和ndnsim</p>
<pre><code>mkdir ndnSIM
cd ndnSIM
git clone git://github.com/cawka/ns-3-dev-ndnSIM.git ns-3
(cd ns-3; git checkout -b ndnSIM-0.4.3  ns-3.17-ndnSIM-0.4.3)
git clone git://github.com/cawka/pybindgen.git pybindgen
git clone git://github.com/NDN-Routing/ndnSIM.git ns-3/src/ndnSIM
(cd ns-3/src/ndnSIM; git checkout -b v0.4.3 v0.4.3)</code></pre>
<p>ns-3目前的版本更新到了v2.1，但是ndnSIM版本没支持这么高，这些选用论文中相同的版本，都是v0.4.3，使用git版本回退功能到v0.4.3版本的Release，可以使用<code>git branch</code>查看当前版本信息，注意使用cd命令改变路径</p>
<p>下载修改完成后目录结构如下 <img src="/images/wsine-blog-image437.png" /></p>
<p>请主动忽略其余文件夹，关键目录结构树如下 - ndnSIM - ns-3 - src - ndnSIM - pybindgen</p>
<h4 id="编译ns-3">编译ns-3</h4>
<p>这里先挖个坑，pybindgen暂时不能成功编译，这里暂时不编译它 将文件夹修改名称，只要不是pybindgen就ok，可以参考我的</p>
<p>/********更新********/ 我来填坑了，凭记忆的错了别怪我，编译前先配置好，在pybindgen文件夹里面，修改version.py文件，根据编译结果提示修改，我这里修改后的结果为：</p>
<div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python">__version__ <span class="op">=</span> [<span class="dv">0</span>, <span class="dv">17</span>, <span class="dv">0</span>, <span class="dv">887</span>]
<span class="co">&quot;&quot;&quot;[major, minor, micro, revno], revno omitted in official releases&quot;&quot;&quot;</span></code></pre></div>
<p>/*********************/</p>
<pre><code>CXXFLAGS=&quot;-Wall&quot; ./waf configure --boost-libs=/usr/lib/x86_64-linux-gnu -d optimized
./waf -j4
sudo ./waf install</code></pre>
<p>这里修改--boost-libs=后面的路径为自己的boost-lib路径，如果已加入环境变量豪华午餐，那就可以不用这个参数了，否则编译工具找不到boost-lib</p>
<p><code>CXXFLAGS=&quot;-Wall&quot;</code>语句的作用是修改报错<code>cc1plus: all warnings being treated as errors</code>，忽略全部的warning</p>
<p><code>-j4</code>这个参数是使用4核同时编译，加快速度，考虑自己环境实际使用，如果使用不当会更慢，编译过程，对于<code>make</code>指令也适用</p>
<p>安装完成后模块信息如图所示 <img src="/images/wsine-blog-image438.png" /></p>
<p>注意检查关键模块ndnSIM模块成功安装与否</p>
<h4 id="编译论文代码">编译论文代码</h4>
<pre><code>cd ndnSIM
git clone https://github.com/cawka/ndnSIM-nom-rapid-car2car.git
cd ndnSIM-nom-rapid-car2car
./waf configure --boost-libs=/usr/lib/x86_64-linux-gnu
./waf</code></pre>
<p>这步不通过请检查上面的环境和过程</p>
<h4 id="安装r语言">安装R语言</h4>
<p>官网网址：https://www.r-project.org/</p>
<p>选择Download R</p>
<p>CRAN列表选择清华大学的镜像源https://mirrors.tuna.tsinghua.edu.cn/CRAN/</p>
<p>选择Download R for Linux</p>
<p>选择ubuntu</p>
<p>选择trusty</p>
<p>64位系统请选择 r-base-core_3.2.2-1trusty0_amd64.deb 下载 32位系统请选择 r-base-core_3.2.2-1trusty0_i386.deb 下载</p>
<p>然后双击安装就可以了</p>
<p>（挖个坑，如果不行再安装一个 r-base_3.2.2-1trusty0_all.deb ，一般这个不用装）</p>
<p>注意，默认使用<code>sudo apt-get install r-base</code>安装后的版本为3.0.2，对于后面安装模块ggplot2会不受支持，因此请用安装包安装最新版</p>
<h4 id="给r环境安装模块">给R环境安装模块</h4>
<pre><code>sudo R
install.packages (&#39;proto&#39;)
install.packages (&#39;ggplot2&#39;)
install.packages (&#39;doBy&#39;)</code></pre>
<p>注意查看安装信息</p>
<h3 id="运行与测试">运行与测试</h3>
<pre><code>cd ndnSIM/ndnSIM-nom-rapid-car2car
./run.py -s figure-3-data-propagation-vs-time
./run.py -s figure-4-data-propagation-vs-distance
./run.py -s figure-5-retx-count</code></pre>
<p>查看信息即可知道运行情况 进入<code>ndnSIM/ndnSIM-nom-rapid-car2car/graphs/pdfs</code>路径可以查看pdf信息情况</p>]]></description>
    <pubDate>Sat, 2 Oct 2021 15:11:32 +0800</pubDate>
  </item>
   
  <item>
    <title><![CDATA[Openwrt无线中继设置并访问外网]]></title>
    <link>https://wsine.github.io/blog/#/p01.%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88%2fOpenwrt%e6%97%a0%e7%ba%bf%e4%b8%ad%e7%bb%a7%e8%ae%be%e7%bd%ae%e5%b9%b6%e8%ae%bf%e9%97%ae%e5%a4%96%e7%bd%91</link>
    <guid isPermaLink="false">https://wsine.github.io/blog/#/p01.%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88%2fOpenwrt%e6%97%a0%e7%ba%bf%e4%b8%ad%e7%bb%a7%e8%ae%be%e7%bd%ae%e5%b9%b6%e8%ae%bf%e9%97%ae%e5%a4%96%e7%bd%91</guid>
    <description><![CDATA[<h1 id="openwrt无线中继设置并访问外网">Openwrt无线中继设置并访问外网</h1>
<blockquote>
<p>本篇博文参考来自：http://blog.csdn.net/pifangsione/article/details/13162023</p>
</blockquote>
<h3 id="配置目标">配置目标</h3>
<ol style="list-style-type: decimal">
<li>主路由器使用AP模式发射Wifi</li>
<li>从路由器使用Client模式接受Wifi</li>
<li>从路由器使用Master模式发射Wifi</li>
<li>连入从路由器的设备也能访问外网</li>
<li>只需要设置从路由器即可</li>
</ol>
<h3 id="配置环境">配置环境</h3>
<ol style="list-style-type: decimal">
<li>主路由器已经能够访问外网</li>
<li>从路由器的内部系统是Openwrt</li>
</ol>
<p>（从界面显示来说我已经配置成功了）</p>
<h3 id="配置步骤">配置步骤</h3>
<p><strong>设置从路由器LAN口</strong></p>
<p>设置从路由器的LAN口所在的IP网段，只要和主路由器所在网段不一样就可以了</p>
<div class="figure">
<img src="/images/wsine-blog-image427.png" />

</div>
<p><strong>设置被桥接路由器</strong></p>
<p>设置从路由器加入到主路由器所在的网络，并设置该网络为从路由器的WAN网络，这里WPA密钥为主路由器的Wifi密码，新网络的名称只要自己记得就好，我这里使用了Openwrt默认给的wwan</p>
<p><img src="/images/wsine-blog-image428.png" /> <img src="/images/wsine-blog-image429.png" /> <img src="/images/wsine-blog-image430.png" /></p>
<p>设置接口配置，信道为主路由器发送AP所在的信道，ESSID为主路由器发送AP的ssid，选择模式为客户端Client，BSSID为主路由器的bssid，网络的选择上面是刚才设置的wwan。这里Openwrt会根据主路由器的信息自动帮你填充，一般来说不用自己填多少内容。</p>
<p><img src="/images/wsine-blog-image431.png" /> <img src="/images/wsine-blog-image432.png" /></p>
<p>当回到总览界面，看到wwan接口那里获取到IPv4地址的时候，就说明接口的配置已经成功了</p>
<div class="figure">
<img src="/images/wsine-blog-image433.png" />

</div>
<p><strong>设置无线网络</strong></p>
<p>从路由器发送AP，添加一个网络。信道一般会锁定为主路由器的信道了，ESSID请自己自定义一个名称就好，模式用接入点AP，网络选择LAN接口，无线安全选项卡里面可以给这个Wifi加密。 注意：如果从路由器的ESSID设置为和主路由器ssid一致，从路由器的密码设置为和主路由器一致，可以做到在两个路由器间无缝漫游。</p>
<p><img src="/images/wsine-blog-image434.png" /> <img src="/images/wsine-blog-image435.png" /></p>
<p><strong>检查无线配置</strong></p>
<p>最后的配置效果应该如图所示，Enjoy your network。</p>
<div class="figure">
<img src="/images/wsine-blog-image436.png" />

</div>]]></description>
    <pubDate>Sat, 2 Oct 2021 15:11:32 +0800</pubDate>
  </item>
   
  <item>
    <title><![CDATA[DHCP Server软件使用教程]]></title>
    <link>https://wsine.github.io/blog/#/p01.%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88%2fDHCP_Server%e8%bd%af%e4%bb%b6%e4%bd%bf%e7%94%a8%e6%95%99%e7%a8%8b</link>
    <guid isPermaLink="false">https://wsine.github.io/blog/#/p01.%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88%2fDHCP_Server%e8%bd%af%e4%bb%b6%e4%bd%bf%e7%94%a8%e6%95%99%e7%a8%8b</guid>
    <description><![CDATA[<h1 id="dhcp-server软件使用教程">DHCP Server软件使用教程</h1>
<h3 id="前提网络环境配置">前提网络环境配置</h3>
<ol style="list-style-type: decimal">
<li>电脑连接上wifi</li>
<li>网络和共享中心中更改适配器，共享无线网卡给以太网网卡</li>
<li>手动设置以太网网卡ipv4地址为192.168.1.1，子网掩码为255.255.255.0</li>
</ol>
<h3 id="正文基本为图片">正文（基本为图片）</h3>
<p>首先以管理员权限打开 dhcpwiz.exe 这个软件</p>
<div class="figure">
<img src="/images/wsine-blog-image418.png" />

</div>
<p>这里以太网的IP-Adress应显示为上面配置的192.168.1.1</p>
<div class="figure">
<img src="/images/wsine-blog-image419.png" />

</div>
<div class="figure">
<img src="/images/wsine-blog-image420.png" />

</div>
<div class="figure">
<img src="/images/wsine-blog-image421.png" />

</div>
<p>这里点击一下Write INI file再下一步</p>
<div class="figure">
<img src="/images/wsine-blog-image422.png" />

</div>
<p>这里依次点击Configure-&gt;Install-&gt; Start，勾选Run DHCP server immediatly，如下图显示，点击完成</p>
<div class="figure">
<img src="/images/wsine-blog-image423.png" />

</div>
<div class="figure">
<img src="/images/wsine-blog-image424.png" />

</div>
<p>这是选择Continue as tray app，然后DHCP服务启动，右下角任务栏有图标显示</p>
<p>接着树莓派上电开机进入系统（耐心等一会儿，开机要时间），然后用网线连接树莓派和电脑（多试几次，知道为什么要完全开机了没）</p>
<p>然后你会看到这个显示（这是Win10界面，不同的系统不同，就是一个系统通知</p>
<div class="figure">
<img src="/images/wsine-blog-image425.png" />

</div>
<p>上图就是ip地址了</p>
<p>然后用Putty软件进入即可</p>
<div class="figure">
<img src="/images/wsine-blog-image426.png" />

</div>
<h3 id="后记">后记</h3>
<p>不使用DHCP Server之前记得关掉，然后恢复适配器的修改，不然作大死喔（笑脸</p>]]></description>
    <pubDate>Sat, 2 Oct 2021 15:11:32 +0800</pubDate>
  </item>
   
  <item>
    <title><![CDATA[arm-elf-gcc交叉编译器的使用教程]]></title>
    <link>https://wsine.github.io/blog/#/p01.%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88%2farm%2delf%2dgcc%e4%ba%a4%e5%8f%89%e7%bc%96%e8%af%91%e5%99%a8%e7%9a%84%e4%bd%bf%e7%94%a8%e6%95%99%e7%a8%8b</link>
    <guid isPermaLink="false">https://wsine.github.io/blog/#/p01.%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88%2farm%2delf%2dgcc%e4%ba%a4%e5%8f%89%e7%bc%96%e8%af%91%e5%99%a8%e7%9a%84%e4%bd%bf%e7%94%a8%e6%95%99%e7%a8%8b</guid>
    <description><![CDATA[<h1 id="arm-elf-gcc交叉编译器的使用教程">arm-elf-gcc交叉编译器的使用教程</h1>
<p>一开始需要安装arm-elf-gcc，但是这是一个32位的程序，我是安装了64位的系统，据说安装ia32.libs依赖库能运行这个，但是看到博客上面前人安装完了系统图标少了一半，然后就怕了。经过了翻看ubuntu论坛和各种博客，才知道14版之后的ubuntu64位官方已经抛弃了ia32.libs这个依赖库，在源列表中也是找不到的。但是官方自身已经支持32位，自带32位依赖库，在根目录下面就有一个lib32文件夹。</p>
<h3 id="安装教程">安装教程</h3>
<p>博主使用的是arm-elf-tools-20040427.sh的编译器，比较老旧，但不影响使用。</p>
<ol style="list-style-type: decimal">
<li>打开终端</li>
<li>切换到arm-elf-tools-200427.sh所在路径</li>
<li>增加执行权限 <code>sudo chmod 755 arm-elf-tools-20040427.sh</code></li>
<li>安装 <code>sudo sh arm-elf-tools-20040427.sh</code></li>
</ol>
<p>以上，安装完成</p>
<p>注：文件arm-elf-tools-20040427.sh的大小有17M，这个脚本就是安装文件。没事不要用普通的文本编辑器打开，高级点的文本编辑器可以。</p>
<h3 id="使用教程">使用教程</h3>
<p>首先上一份简单的测试代码</p>
<pre><code>int max( int* pt, int size )
{
    int max_v = -32768;
    int* tmp = &amp;pt[size];
    int* pi = pt;
    
    while(pi&lt;tmp){
        if( *pi&gt;max_v ){
            max_v = *pi;
        
        }
        pi++;
    }
    
    return max_v;   
}</code></pre>
<ol style="list-style-type: decimal">
<li><p><code>arm-elf-gcc -S max.c</code> 得到由c文件生成的汇编文件max.s <img src="/images/wsine-blog-image117.png" alt="1" /></p></li>
<li><p><code>arm-elf-gcc -c max.s</code> 由汇编文件编译得到Object文件max.o <img src="/images/wsine-blog-image118.png" alt="2" /></p></li>
<li><p><code>arm-elf-readelf -a max.o &gt; max_elfinfo</code> 这个命令将给出全部的Object文件信息,保存在max_elfinfo这个文件中 <img src="/images/wsine-blog-image119.png" alt="3" /></p></li>
<li><p>查看一下max_elfinfo文件：ELF_header <img src="/images/wsine-blog-image120.png" alt="4" /></p></li>
<li><p>查看一下max_elfinfo文件：Section_header <img src="/images/wsine-blog-image121.png" alt="5" /> <img src="/images/wsine-blog-image122.png" alt="5_2" /></p></li>
<li><p><code>hexdump -C max.o &gt; max_hex</code> 直接打印出Object文件的全部字节，保存在max_hex文件中 <img src="/images/wsine-blog-image123.png" alt="6" /> 以上面的.real.text为例子 <img src="/images/wsine-blog-image124.png" alt="6_2" /></p></li>
<li>Elf最后输出的内容 <img src="/images/wsine-blog-image125.png" alt="7" /> .rel.text告诉链接器指令中的哪些地方需要做重定位; .symtab是符号表。Ndx列是每个符号所在的Section编号</li>
<li><code>arm-elf-ld.real -o max2.out max.o</code> 链接指定Object文件，max2.out为生成的文件，max.o为源文件 <img src="/images/wsine-blog-image126.png" alt="8" /> 由于没有__gccmain函数入口，故有warning，此处先不管，绿色即为新生成文件</li>
<li><p>用readelf命令分析新生成的max2.out <code>arm-elf-readelf -a max2.out &gt; max2_elfinfo</code> <img src="/images/wsine-blog-image127.png" alt="9" /> <img src="/images/wsine-blog-image128.png" alt="9_2" /> <img src="/images/wsine-blog-image129.png" alt="9_3" /></p></li>
<li><p>调用不同c文件中的子函数 程序修改后如下： <img src="/images/wsine-blog-image130.png" alt="10" /> <img src="/images/wsine-blog-image131.png" alt="10_2" /> <img src="/images/wsine-blog-image132.png" alt="10_3" /></p></li>
<li><p>编译两份c文件生成 .o 文件 <img src="/images/wsine-blog-image133.png" alt="11" /></p></li>
<li><p><code>arm-elf-ld.real -o main2.out main.o encrypt_char.o -lc</code> main2.out是链接生成的文件，main.o encrypt_char.o是参与链接的源文件，-lc 允许链接器搜索默认的路径，当你使用了系统自带的头文件或子函数时，需要添加该选项以便链接器能顺利链接到对应库 <img src="/images/wsine-blog-image134.png" alt="12" /></p></li>
<li><p><code>arm-elf-objdump -S main2.out &gt; main2_1.s</code> 反汇编链接后的.out文件，和链接前的.o文件反汇编结果进行比较 <img src="/images/wsine-blog-image135.png" alt="13" /> 新生成的main2_1.s文件里面比原来的多了很多内容，最大的不同在于区分了各个文件的代码段 <img src="/images/wsine-blog-image136.png" alt="13_2" /> <img src="/images/wsine-blog-image137.png" alt="13_3" /> <img src="/images/wsine-blog-image138.png" alt="13_4" /></p></li>
</ol>]]></description>
    <pubDate>Sat, 2 Oct 2021 15:11:32 +0800</pubDate>
  </item>
   
  <item>
    <title><![CDATA[APM飞控修改数传模块方法]]></title>
    <link>https://wsine.github.io/blog/#/p01.%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88%2fAPM%e9%a3%9e%e6%8e%a7%e4%bf%ae%e6%94%b9%e6%95%b0%e4%bc%a0%e6%a8%a1%e5%9d%97%e6%96%b9%e6%b3%95</link>
    <guid isPermaLink="false">https://wsine.github.io/blog/#/p01.%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88%2fAPM%e9%a3%9e%e6%8e%a7%e4%bf%ae%e6%94%b9%e6%95%b0%e4%bc%a0%e6%a8%a1%e5%9d%97%e6%96%b9%e6%b3%95</guid>
    <description><![CDATA[<h1 id="apm飞控修改数传模块方法">APM飞控修改数传模块方法</h1>
<h3 id="硬件">硬件</h3>
<ul>
<li>ARDUCOPTER第二代</li>
<li>数传模块(USB接口)</li>
<li>数传模块(telem接口)</li>
<li>usb-ttl模块</li>
</ul>
<h3 id="修改方法">修改方法</h3>
<blockquote>
<p>注意：APM固件版本和数传模块估计版本是分开的，但有一定的对应关系，APM的固件2.x版本应该对应数传模块的1.9版本，数传模块的1.7版本是给旧式的APM固件使用的。连接数传必须两端都使用同一个固件版本。</p>
</blockquote>
<p><strong>数传模块（USB接口）：</strong> 1. 把数传模块连接电脑 2. 在电脑打开Mission Planner软件，分别选择 初始设置-&gt;可选硬件-&gt;Sik电台（数传） 3. 选择COM口，波特率选择57600，不要点击连接 4. 点击加载设置 5. 修改网络ID和通道这个参数，和其他人的不一样就可以了。 6. 最后点击保存设置。</p>
<div class="figure">
<img src="/images/wsine-blog-image393.jpg" alt="USB修改后的" />
<p class="caption">USB修改后的</p>
</div>
<p><strong>数传模块（telem接口）：</strong> 1. 首先电脑安装usb-ttl模块的驱动，一般购买时店家会提供驱动。（必须正确驱动） 2. 将usb-ttl模块和模块连接（需要剪线），接口看模块背后，连接方法如下：</p>
<pre class="sequence"><code>Title: 连接方式
TTL-&gt;telem: +5v ------------ +5v
TTL-&gt;telem: TX  ------------ RX
TTL-&gt;telem: RX  ------------ TX
TTL-&gt;telem: GND ------------ GND</code></pre>
<ol start="3" style="list-style-type: decimal">
<li>USB接口连接电脑</li>
<li>在电脑打开Mission Planner软件，分别选择 初始设置-&gt;可选硬件-&gt;Sik电台（数传）</li>
<li>点击加载设置</li>
<li>修改网络ID和通道这个参数，和USB口的数传模式保持一致。</li>
<li>最后点击保存设置。</li>
</ol>
<div class="figure">
<img src="/images/wsine-blog-image394.jpg" alt="telem修改后的" />
<p class="caption">telem修改后的</p>
</div>
<p><strong>特殊修改</strong></p>
<p>加载固件（本地）可以重刷数传的固件。等待进度条完毕后，数传模块固件更新成功。</p>
<p>上传自定义固件（记得匹配版本）[文章末尾有传送门]。等待进度条完毕后，数传模块固件更新成功。</p>
<h3 id="后记">后记</h3>
<ol style="list-style-type: decimal">
<li>使用无线连接同时修改本地端和无线端的参数不靠谱，因为无线连接不稳定（我就是这么挂掉的）。</li>
<li><p>国内最好使用433MHz的数传模块，相比于国外的频谱分布，国内的915MHz和联通公司的GSM网络使用同一频段，会产生一定干扰。 <img src="/images/wsine-blog-image395.jpg" alt="频段图" /></p></li>
<li><p>在一定的范围内，保存默认的57600的波特率已经足够使用，打开ECC端口能使连接速度提高。</p></li>
</ol>
<h3 id="传送门">传送门</h3>
<p><a href="http://pan.baidu.com/s/1qWQmMQw">固件下载</a></p>]]></description>
    <pubDate>Sat, 2 Oct 2021 15:11:32 +0800</pubDate>
  </item>
  
</channel>
</rss>

